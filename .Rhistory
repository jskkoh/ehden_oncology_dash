mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff)
# Hazard rate over time
rateHazCprd_df = readRDS("./data/hazard_overtime_results_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff)
# Mean/median survival estimates
survAvgCprd_df = readRDS("./data/median_survival_results_CPRD_Aurum.rds") %>%
mutate(meanSurv=round(`*rmean`,3),medianSurv=round(median,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(Cancer,Age,Gender,meanSurv,medianSurv,Database)
# Number at risk summary table
riskTableCprd_df = readRDS("./data/risk_table_results_CPRD_Aurum.rds") %>%
mutate(Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Method,-Stratification,-GenderAge)
rownames(riskTableCprd_df) <- NULL
# Write all formatted csv data files
saveRDS(SurvCprd_df,"./data/survCprd.rds")
saveRDS(rateHazCprd_df,"./data/rateHazCprd.rds")
saveRDS(fitCprd_df,"./data/fitCprd.rds")
saveRDS(survAvgCprd_df,"./data/survAvgCprd.rds")
saveRDS(riskTableCprd_df,"./data/riskTableCprd.rds")
surv_df_all = readRDS("./data/survCprd.rds")
cancers <- unique(surv_df_all$Cancer)
ages <- unique(surv_df_all$Age)
genders <- unique(surv_df_all$Gender)
datasets <- unique(surv_df_all$Database)
plotCombinations <- expand.grid(Cancer=cancers,Age=ages,
Gender=genders,Database=datasets) %>%
mutate(Render=1,
Render=ifelse(Cancer=="ProstateCancer" & Gender=="Female",0,Render))
runApp()
runApp()
runApp()
# Script to load, format and save survival extrapolation data
# to be loaded into the dashboard
# Specify a set of intervals to take subset of K-M observations
monthIntervals <- data.frame(time2=seq(0,25,1/26)) %>%
mutate(matchid=row_number())
# For extrapolation and hazard data, timepoints are matched to nearest
# specified interval
# Goodness of fit statistics
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Stratification,-GenderAge)
# Survival curves
SurvCprd_df = readRDS("./data/survival_estimates_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Hazard rate over time
rateHazCprd_df = readRDS("./data/hazard_overtime_results_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Mean/median survival estimates
survAvgCprd_df = readRDS("./data/median_survival_results_CPRD_Aurum.rds") %>%
mutate(meanSurv=round(`*rmean`,3),medianSurv=round(median,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(Cancer,Age,Gender,meanSurv,medianSurv,Database)
# Number at risk summary table
riskTableCprd_df = readRDS("./data/risk_table_results_CPRD_Aurum.rds") %>%
mutate(Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Method,-Stratification,-GenderAge)
rownames(riskTableCprd_df) <- NULL
# Write all formatted csv data files
saveRDS(SurvCprd_df,"./data/survCprd.rds")
saveRDS(rateHazCprd_df,"./data/rateHazCprd.rds")
saveRDS(fitCprd_df,"./data/fitCprd.rds")
saveRDS(survAvgCprd_df,"./data/survAvgCprd.rds")
saveRDS(riskTableCprd_df,"./data/riskTableCprd.rds")
runApp()
library(tidyverse)
library(DT)
library(readxl)
# extrap_param = readRDS("./data/extrapolation_parameters_CPRD_Aurum.rds")
# Load data ---------------------------------------------------------------
# Goodness of fit statistics
gof_df_all = readRDS("./data/fitCprd.rds")
# K-M survival curves
surv_df_all = readRDS("./data/survCprd.rds")
# Hazard rate over time
rateHaz_df_all = readRDS("./data/rateHazCprd.rds")
# Mean/median survival estimates
survAvg_df_all = readRDS("./data/survAvgCprd.rds")
# Number at risk summary table
riskTable_df_all = readRDS("./data/riskTableCprd.rds")
# Load analysis functions
source("./R/cancerDashFunctions.R")
source("./R/plotCombinations")
source("./R/plotCombinations.R")
pull(plotCombinations %>%
filter(Cancer=="BreastCancer" &
Age=="All" &
Gender=="Both" &
Database=="CPRD_Aurum") %>%
select(Render))
View(surv_df_all)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds")
SurvCprd_df = readRDS("./data/survival_estimates_CPRD_Aurum.rds")
View(SurvCprd_df)
View(plotCombinations)
runApp()
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# Both genders, all ages
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender==genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
View(fitCprd_df1)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# Both genders, all ages
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender=genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
View(fitCprd_df0)
for(i in 1:length(ages)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age") %>%
mutate(Age=ages[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
View(fitCprd_df)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# All ages, by gender
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender=genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age, both genders
for(i in 1:length(ages)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age") %>%
mutate(Age=ages[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age and gender
for(i in 1:length(ages)) {
for(j in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age*Gender") %>%
mutate(Age=ages[i],Gender=genders[j])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
}
View(fitCprd_df0)
cancers <- unique(SurvCprd_df$Cancer)
ages <- unique(SurvCprd_df$Age)
ages <- ages[-1]
genders <- unique(SurvCprd_df$Gender)
genders <- genders[-1]
datasets <- unique(SurvCprd_df$Database)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# All ages, by gender
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender=genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age, both genders
for(i in 1:length(ages)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age") %>%
mutate(Age=ages[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age and gender
for(i in 1:length(ages)) {
for(j in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age*Gender") %>%
mutate(Age=ages[i],Gender=genders[j])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
}
View(fitCprd_df0)
fitCprd_df = fitCprd_df0 %>%
select(-Stratification,-GenderAge)
View(fitCprd_df)
saveRDS(fitCprd_df,"./data/fitCprd.rds")
runApp()
View(surv_df_all)
monthIntervals <- data.frame(time2=seq(0,25,1/18)) %>%
mutate(matchid=row_number())
# For extrapolation and hazard data, timepoints are matched to nearest
# specified interval
# Goodness of fit statistics
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Stratification,-GenderAge)
# Survival curves
SurvCprd_df = readRDS("./data/survival_estimates_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Hazard rate over time
rateHazCprd_df = readRDS("./data/hazard_overtime_results_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Mean/median survival estimates
survAvgCprd_df = readRDS("./data/median_survival_results_CPRD_Aurum.rds") %>%
mutate(meanSurv=round(`*rmean`,3),medianSurv=round(median,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(Cancer,Age,Gender,meanSurv,medianSurv,Database)
# Number at risk summary table
riskTableCprd_df = readRDS("./data/risk_table_results_CPRD_Aurum.rds") %>%
mutate(Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Method,-Stratification,-GenderAge)
rownames(riskTableCprd_df) <- NULL
# Additional code for webinar to duplicate fit statistics to match
# stratification combinations
###### DELETE WHEN NEW DATA COMES IN FROM DANIELLE ######
cancers <- unique(SurvCprd_df$Cancer)
ages <- unique(SurvCprd_df$Age)
ages <- ages[-1]
genders <- unique(SurvCprd_df$Gender)
genders <- genders[-1]
datasets <- unique(SurvCprd_df$Database)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# All ages, by gender
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender=genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age, both genders
for(i in 1:length(ages)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age") %>%
mutate(Age=ages[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age and gender
for(i in 1:length(ages)) {
for(j in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age*Gender") %>%
mutate(Age=ages[i],Gender=genders[j])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
}
fitCprd_df = fitCprd_df0 %>%
select(-Stratification,-GenderAge)
###### DELETE WHEN NEW DATA COMES IN FROM DANIELLE ######
# Write all formatted csv data files
saveRDS(SurvCprd_df,"./data/survCprd.rds")
saveRDS(rateHazCprd_df,"./data/rateHazCprd.rds")
saveRDS(fitCprd_df,"./data/fitCprd.rds")
saveRDS(survAvgCprd_df,"./data/survAvgCprd.rds")
saveRDS(riskTableCprd_df,"./data/riskTableCprd.rds")
library(tidyverse)
monthIntervals <- data.frame(time2=seq(0,25,1/18)) %>%
mutate(matchid=row_number())
# For extrapolation and hazard data, timepoints are matched to nearest
# specified interval
# Goodness of fit statistics
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Stratification,-GenderAge)
# Survival curves
SurvCprd_df = readRDS("./data/survival_estimates_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Hazard rate over time
rateHazCprd_df = readRDS("./data/hazard_overtime_results_CPRD_Aurum.rds") %>%
mutate(Method=ifelse(Method=="Kaplan-Meier","Observed",Method),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer),
Age1=sub(".*_","",GenderAge),
Gender1=sub("_.*","",GenderAge),
Age=ifelse(!is.na(GenderAge),Age1,Age),
Gender=ifelse(!is.na(GenderAge),Gender1,Gender)) %>%
# Taking the subset of observations specified in monthIntervals
rowwise() %>%
mutate(matchid=which.min(abs(monthIntervals$time2-time))) %>%
left_join(monthIntervals,by="matchid") %>%
mutate(absDiff=abs(time2-time)) %>% group_by(Method,Cancer,Age,Gender,time2) %>%
filter(absDiff==min(absDiff)) %>%
mutate(time=round(time2,3),est=round(est,5),lcl=round(lcl,5),ucl=round(ucl,5)) %>%
ungroup() %>%
select(-Stratification,-GenderAge,-matchid,-time2,-absDiff,-Age1,-Gender1)
# Mean/median survival estimates
survAvgCprd_df = readRDS("./data/median_survival_results_CPRD_Aurum.rds") %>%
mutate(meanSurv=round(`*rmean`,3),medianSurv=round(median,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(Cancer,Age,Gender,meanSurv,medianSurv,Database)
# Number at risk summary table
riskTableCprd_df = readRDS("./data/risk_table_results_CPRD_Aurum.rds") %>%
mutate(Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer)) %>%
select(-Method,-Stratification,-GenderAge)
rownames(riskTableCprd_df) <- NULL
# Additional code for webinar to duplicate fit statistics to match
# stratification combinations
###### DELETE WHEN NEW DATA COMES IN FROM DANIELLE ######
cancers <- unique(SurvCprd_df$Cancer)
ages <- unique(SurvCprd_df$Age)
ages <- ages[-1]
genders <- unique(SurvCprd_df$Gender)
genders <- genders[-1]
datasets <- unique(SurvCprd_df$Database)
fitCprd_df = readRDS("./data/Goodness_of_fit_results_CPRD_Aurum.rds") %>%
mutate(trisk=round(trisk,0),logLik=round(logLik,3),
AIC=round(AIC,3),BIC=round(BIC,3),
Cancer=ifelse(Cancer=="ProstateCancerMaleOnly","ProstateCancer",Cancer))
# Start with complete data: all ages, both genders
fitCprd_df0 <- filter(fitCprd_df,Stratification=="None")
# All ages, by gender
for(i in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Gender") %>%
mutate(Gender=genders[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age, both genders
for(i in 1:length(ages)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age") %>%
mutate(Age=ages[i])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
# By age and gender
for(i in 1:length(ages)) {
for(j in 1:length(genders)) {
fitCprd_df1 <- fitCprd_df %>% filter(Stratification=="Age*Gender") %>%
mutate(Age=ages[i],Gender=genders[j])
fitCprd_df0 <- rbind(fitCprd_df0,fitCprd_df1)
}
}
fitCprd_df = fitCprd_df0 %>%
select(-Stratification,-GenderAge)
###### DELETE WHEN NEW DATA COMES IN FROM DANIELLE ######
# Write all formatted csv data files
saveRDS(SurvCprd_df,"./data/survCprd.rds")
saveRDS(rateHazCprd_df,"./data/rateHazCprd.rds")
saveRDS(fitCprd_df,"./data/fitCprd.rds")
saveRDS(survAvgCprd_df,"./data/survAvgCprd.rds")
saveRDS(riskTableCprd_df,"./data/riskTableCprd.rds")
shiny::runApp()
runApp()
runApp()
0.6*70+.4*28
37.5*2
75/9
8.333*4
library(tidyverse)
install.packages("ggradar")
library(ggradar)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
install_github("ricardo-bion/ggradar",
dependencies = TRUE)
install.packages("devtools")
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
install.packages(c("BH", "blob", "broom", "cachem", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "dplyr", "DT", "dtplyr", "evaluate", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "knitr", "lubridate", "modelr", "openssl", "pillar", "ps", "quantmod", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "sass", "sourcetools", "tibble", "tidyr", "tidyverse", "tinytex", "utf8", "vctrs", "vroom", "xfun", "XML", "xts", "yaml", "zoo"))
library(tidyverse)
library(ggradar)
library(readxl)
getwd()
shiny::runApp()
runApp()
runApp()
library(dbplyr)
library(tidyverse)
runApp()
shiny::runApp()
runApp()
install.packages(c("askpass", "broom", "bslib", "cachem", "cpp11", "credentials", "curl", "dbplyr", "digest", "downlit", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "gert", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "httr2", "igraph", "jsonlite", "knitr", "labeling", "later", "openssl", "pkgbuild", "pkgload", "processx", "profvis", "promises", "ps", "purrr", "quantmod", "Rcpp", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "rstudioapi", "sass", "shiny", "shinyWidgets", "sys", "testthat", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2"))
install.packages(c("askpass", "broom", "bslib", "cachem", "cpp11", "credentials", "curl", "dbplyr", "digest", "downlit", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "gert", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "httr2", "igraph", "jsonlite", "knitr", "labeling", "later", "openssl", "pkgbuild", "pkgload", "processx", "profvis", "promises", "ps", "purrr", "quantmod", "Rcpp", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "rstudioapi", "sass", "shiny", "shinyWidgets", "sys", "testthat", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2"))
install.packages(c("askpass", "broom", "bslib", "cachem", "cpp11", "credentials", "curl", "dbplyr", "digest", "downlit", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "gert", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "httr2", "igraph", "jsonlite", "knitr", "labeling", "later", "openssl", "pkgbuild", "pkgload", "processx", "profvis", "promises", "ps", "purrr", "quantmod", "Rcpp", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "rstudioapi", "sass", "shiny", "shinyWidgets", "sys", "testthat", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2"))
install.packages(c("askpass", "broom", "bslib", "cachem", "cpp11", "credentials", "curl", "dbplyr", "digest", "downlit", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "gert", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "httr2", "igraph", "jsonlite", "knitr", "labeling", "later", "openssl", "pkgbuild", "pkgload", "processx", "profvis", "promises", "ps", "purrr", "quantmod", "Rcpp", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "rstudioapi", "sass", "shiny", "shinyWidgets", "sys", "testthat", "tinytex", "tzdb", "usethis", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2"))
shiny::runApp()
shiny::runApp()
library(tidyverse)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(magrittr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.rLibPaths()
.rlibPaths()
.libPaths()
detach("package:magrittr", unload = TRUE)
runApp()
runApp()
runApp()
